#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <cmath>
#include "json.hpp"

using namespace std;
using json = nlohmann::json;

int stoi_custom(const string& str, int base_val) {
    int result = 0;
    for (char c : str) {
        result *= base_val;
        if (isdigit(c)) {
            result += c - '0';
        } else if (isalpha(c)) {
            result += toupper(c) - 'A' + 10;
        }
    }
    return result;
}

vector<double> gaussian_elimination(vector<vector<double>>& A, vector<double>& B) {
    int n = A.size();

    for (int i = 0; i < n; ++i) {
        int maxRow = i;
        for (int k = i + 1; k < n; ++k) {
            if (fabs(A[k][i]) > fabs(A[maxRow][i])) {
                maxRow = k;
            }
        }
        if (maxRow != i) {
            swap(A[i], A[maxRow]);
            swap(B[i], B[maxRow]);
        }

        double diag = A[i][i];
        for (int j = i; j < n; ++j) {
            A[i][j] /= diag;
        }
        B[i] /= diag;

        for (int k = i + 1; k < n; ++k) {
            double factor = A[k][i];
            for (int j = i; j < n; ++j) {
                A[k][j] -= factor * A[i][j];
            }
            B[k] -= factor * B[i];
        }
    }

    vector<double> x(n);
    for (int i = n - 1; i >= 0; --i) {
        x[i] = B[i];
        for (int j = i + 1; j < n; ++j) {
            x[i] -= A[i][j] * x[j];
        }
    }

    return x;
}

int main() {
    ifstream inputFile("input.json");
    json jsonObject;
    inputFile >> jsonObject;

    int n = jsonObject["keys"]["n"];
    int k = jsonObject["keys"]["k"];

    vector<pair<int, int>> points;
    
    for (auto& item : jsonObject.items()) {
        if (item.key() == "keys") continue;

        int x = stoi(item.key());
        int base_val = stoi(item.value()["base"].get<string>());
        string value = item.value()["value"];
        int y = stoi_custom(value, base_val);
        
        points.push_back({x, y});
    }

    int m = k - 1;
    vector<vector<double>> A(k, vector<double>(k, 0));
    vector<double> B(k);

    for (int i = 0; i < k; ++i) {
        int x = points[i].first;
        int y = points[i].second;
        double x_pow = 1;
        for (int j = 0; j <= m; ++j) {
            A[i][j] = x_pow;
            x_pow *= x;
        }
        B[i] = y;
    }

    vector<double> coefficients = gaussian_elimination(A, B);

    double constant_term = coefficients[0];

    cout << "The reconstructed constant term is: " << constant_term << endl;

    return 0;
}
